# Robotic Arm Project: Organic and Non-Organic Object Classifier

This project guides students to build a robotic arm using a Raspberry Pi that classifies objects as organic or non-organic based on live video input and moves them accordingly. Below is a detailed guide on how to set up, install necessary dependencies, and improve the system.

---

## Prerequisites

- **Hardware Requirements**:
  - Raspberry Pi (with GPIO capabilities)
  - Robotic arm (with motors and motor driver connected to the Raspberry Pi)
  - Camera (compatible with Raspberry Pi, e.g., Raspberry Pi Camera Module)
  - Power supply
  - Voltage regulator (to protect the Raspberry Pi from electrical surges)

- **Software Requirements**:
  - Python 3.6 or higher
  - Operating system: Raspberry Pi OS or any Linux-based OS for Raspberry Pi

---

## Installation

### 1. Install Required Python Libraries
Run the following commands to install the necessary libraries:

```bash
pip install pandas tensorflow numpy opencv-python scikit-learn
sudo apt-get install python3-rpi.gpio
```

### 2. Verify Installations
Create a Python script and add the following code to ensure all libraries are installed:

```python
import pandas as pd
import tensorflow as tf
import numpy as np
import cv2
import RPi.GPIO as GPIO
from sklearn.model_selection import train_test_split

print("All libraries are successfully installed!")
```
Run the script. If no errors are displayed, the setup is complete.

---

## Usage

### 1. Preparing the Dataset

1. **Organize Your Images**:
   - Collect images of organic items (e.g., fruits, vegetables, bones) and non-organic items (e.g., pens, plastics).
   - Save them in appropriate folders:
     ```
     dataset/
       organic/
         image1.jpg
         image2.jpg
       non_organic/
         image1.jpg
         image2.jpg
     ```

2. **Create a CSV File**:
   - Use Excel or any spreadsheet tool to create a CSV file with the following structure:
     ```csv
     ImagePath,Label
     /path/to/dataset/organic/image1.jpg,Organic
     /path/to/dataset/non_organic/image1.jpg,Non-Organic
     ```
   - Save the file as `dataset.csv`.

### 2. Training the Model

1. Uncomment the following line in the code to train the model:
   ```python
   model = train_model_from_csv("dataset.csv")
   ```
2. Run the Python script. The model will be trained and saved as `organic_classifier_model.h5`.

### 3. Running the Robot

1. Ensure the trained model file (`organic_classifier_model.h5`) is in the same directory as the script.
2. Connect the robotic arm and camera to the Raspberry Pi.
3. Run the script:
   ```bash
   python robot.py
   ```
4. The robot will classify objects and perform actions based on its predictions.

---

## Testing the System

### 1. Test Camera Feed
Use this script to ensure the camera is functioning properly:

```python
import cv2
cap = cv2.VideoCapture(0)
while True:
    ret, frame = cap.read()
    cv2.imshow("Camera Feed", frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
cap.release()
cv2.destroyAllWindows()
```

### 2. Test Motor Movement
Use this script to test the robotic arm's motors:

```python
import RPi.GPIO as GPIO
import time
motor_pins = [17, 27, 22, 5, 6, 13]
GPIO.setmode(GPIO.BCM)
for pin in motor_pins:
    GPIO.setup(pin, GPIO.OUT)
try:
    for pin in motor_pins:
        GPIO.output(pin, GPIO.HIGH)
        time.sleep(1)
        GPIO.output(pin, GPIO.LOW)
finally:
    GPIO.cleanup()
```

### 3. Test Classification
Run the full script with a test object and verify if it correctly classifies and moves the item.

---

## Improving the Code

1. **Enhance Dataset**:
   - Add more images to the dataset for better accuracy.
   - Use data augmentation (rotation, flipping, etc.) to improve generalization.
     ```python
     from tensorflow.keras.preprocessing.image import ImageDataGenerator
     datagen = ImageDataGenerator(
         rescale=1./255,
         rotation_range=20,
         width_shift_range=0.2,
         height_shift_range=0.2,
         horizontal_flip=True
     )
     ```

2. **Optimize Model Architecture**:
   - Experiment with deeper models like ResNet or MobileNet for better performance.

3. **Adjust Confidence Threshold**:
   - Modify the confidence threshold in the script to balance between precision and recall:
     ```python
     if confidence > 0.8:
         # Take action
     ```

4. **Add Logging**:
   - Record classification results and actions for debugging and analysis:
     ```python
     import logging
     logging.basicConfig(filename='robot.log', level=logging.INFO)
     logging.info(f"Detected: {label}, Confidence: {confidence:.2f}")
     ```

---

## How to Make the Dataset More Powerful

1. **Diversify Images**:
   - Collect images with different lighting, angles, and backgrounds.
   - Use a variety of objects to represent both organic and non-organic classes.

2. **Increase Sample Size**:
   - Aim for at least 100 images per class to ensure robust training.

3. **Use Public Datasets**:
   - Include images from public datasets (e.g., Kaggle, ImageNet) to enhance the variety and quality of the data.

4. **Label Accuracy**:
   - Ensure all images are correctly labeled in the CSV file.

---

## Conclusion

By following this guide, students can:
- Train and deploy a classification model.
- Build a robotic arm that performs real-world tasks.
- Improve the system through iterative enhancements.

For further assistance, feel free to reach out or refer to the relevant documentation.